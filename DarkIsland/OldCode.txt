	/*
	BasicLoader^ loader = ref new BasicLoader(m_deviceResources->GetD3DDevice());

	std::vector<task<void>> tasks;

	tasks.push_back(loader->LoadTextureAsync("yell.dds", nullptr, m_stuff_model[0]->GetMaterialTexture(L"yellow_col", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("barrel.dds", nullptr, m_stuff_model[0]->GetMaterialTexture(L"black_col", 0, 0)));

	tasks.push_back(loader->LoadTextureAsync("barrel.dds", nullptr, m_stuff_model[1]->GetMaterialTexture(L"BarrelMat", 0, 0)));

	tasks.push_back(loader->LoadTextureAsync("beachball.dds", nullptr, m_stuff_model[2]->GetMaterialTexture(L"ball_col", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("beachball_e.dds", nullptr, m_stuff_model[2]->GetMaterialEmmit(L"ball_col", 0.5f)));

	tasks.push_back(loader->LoadTextureAsync("granite.dds", nullptr, m_stuff_model[3]->GetMaterialTexture(L"collum_col", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("bigrocks_norm.dds", nullptr, m_stuff_model[3]->GetMaterialNormal(L"collum_col", 0.5f)));

	tasks.push_back(loader->LoadTextureAsync("granite.dds", nullptr, m_stuff_model[4]->GetMaterialTexture(L"BlockMat", 0, 0)));

	tasks.push_back(loader->LoadTextureAsync("woodfloor.dds", nullptr, m_stuff_model[5]->GetMaterialTexture(L"BlockMat", 0, 0)));

	tasks.push_back(loader->LoadTextureAsync("woodfloor.dds", nullptr, m_stuff_model[6]->GetMaterialTexture(L"DiskMat", 0, 0)));

	tasks.push_back(loader->LoadTextureAsync("pumpkintex.dds", nullptr, m_stuff_model[7]->GetMaterialTexture(L"PumpInMat", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("pumpkintex.dds", nullptr, m_stuff_model[7]->GetMaterialTexture(L"PumpOutMat", 0, 0)));

	tasks.push_back(loader->LoadTextureAsync("fence1.dds", nullptr, m_stuff_model[8]->GetMaterialTexture(L"FenceMat", 0, 0)));

	tasks.push_back(loader->LoadTextureAsync("pin.dds", nullptr, m_stuff_model[9]->GetMaterialTexture(L"PinMat", 0, 0)));

	return when_all(tasks.begin(), tasks.end()).then([this]
	{
		bLoadingComplete = true;
	});
	*/

	/*
	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"mariobox.cmo",
		L"",
		L"",
		m_stuff_model[0]->m_mesh,
		0.5f).then([this]()
	{
		m_stuff_model[0]->info.mrf = XMFLOAT3(0.2f, 0.5f, 0.5f);
		m_stuff_model[0]->physics_shape = SHAPE_BOX;
		m_stuff_model[0]->collision_range = 0;
		m_stuff_model[0]->info.group = (COL_CARBODY | COL_WHEEL | COL_TERRAIN | COL_OBJECTS | COL_CHAR);
		m_stuff_model[0]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"oil_barrel.cmo",
		L"",
		L"",
		m_stuff_model[1]->m_mesh,
		0.5f).then([this]()
	{
		m_stuff_model[1]->info.mrf = XMFLOAT3(0.3f, 0.5f, 0.5f);
		m_stuff_model[1]->physics_shape = SHAPE_CYLINDER;
		m_stuff_model[1]->collision_range = 0;
		m_stuff_model[1]->info.group = (COL_CARBODY | COL_WHEEL | COL_TERRAIN | COL_OBJECTS | COL_CHAR);
		m_stuff_model[1]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"beachball.cmo",
		L"",
		L"",
		m_stuff_model[2]->m_mesh,
		0.5f).then([this]()
	{
		m_stuff_model[2]->info.mrf = XMFLOAT3(0.1f, 0.9f, 0.5f);
		m_stuff_model[2]->physics_shape = SHAPE_SPHERE;
		m_stuff_model[2]->collision_range = 0;
		m_stuff_model[2]->info.group = (COL_CARBODY | COL_WHEEL | COL_TERRAIN | COL_OBJECTS | COL_CHAR);
		m_stuff_model[2]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"column.cmo",
		L"",
		L"",
		m_stuff_model[3]->m_mesh,
		0.5f).then([this]()
	{
		m_stuff_model[3]->info.mrf = XMFLOAT3(2.1f, 0.1f, 0.5f);
		m_stuff_model[3]->physics_shape = SHAPE_BOX;
		m_stuff_model[3]->collision_range = 0;
		m_stuff_model[3]->info.group = (COL_CARBODY | COL_WHEEL | COL_TERRAIN | COL_OBJECTS | COL_CHAR);
		m_stuff_model[3]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"block.cmo",
		L"",
		L"",
		m_stuff_model[4]->m_mesh,
		0.5f).then([this]()
	{
		m_stuff_model[4]->info.mrf = XMFLOAT3(1.0f, 0.1f, 1.0f);
		m_stuff_model[4]->physics_shape = SHAPE_BOX;
		m_stuff_model[4]->collision_range = 0;
		m_stuff_model[4]->info.group = (COL_CARBODY | COL_WHEEL | COL_TERRAIN | COL_OBJECTS | COL_CHAR);
		m_stuff_model[4]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"block.cmo",
		L"",
		L"",
		m_stuff_model[5]->m_mesh,
		0.5f).then([this]()
	{
		m_stuff_model[5]->info.mrf = XMFLOAT3(0.0f, 0.1f, 0.5f);
		m_stuff_model[5]->physics_shape = SHAPE_BOX;
		m_stuff_model[5]->collision_range = 0;
		m_stuff_model[5]->info.group = (COL_CARBODY | COL_WHEEL | COL_TERRAIN | COL_OBJECTS | COL_CHAR);
		m_stuff_model[5]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"big_disk.cmo",
		L"",
		L"",
		m_stuff_model[6]->m_mesh,
		0.5f).then([this]()
	{
		m_stuff_model[6]->info.mrf = XMFLOAT3(1.0f, 0.1f, 0.5f);
		m_stuff_model[6]->physics_shape = SHAPE_CYLINDER;
		m_stuff_model[6]->collision_range = 0;
		m_stuff_model[6]->info.group = (COL_CARBODY | COL_WHEEL | COL_TERRAIN | COL_OBJECTS | COL_CHAR);
		m_stuff_model[6]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"pumpkined.cmo",
		L"",
		L"",
		m_stuff_model[7]->m_mesh,
		0.5f).then([this]()
	{
		m_stuff_model[7]->info.mrf = XMFLOAT3(0.2f, 0.5f, 1.5f);
		m_stuff_model[7]->physics_shape = SHAPE_ELLIPSEOID;
		m_stuff_model[7]->collision_range = 0;
		m_stuff_model[7]->info.group = (COL_CARBODY | COL_WHEEL | COL_TERRAIN | COL_OBJECTS | COL_CHAR);
		m_stuff_model[7]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"fence1.cmo",
		L"",
		L"",
		m_stuff_model[8]->m_mesh,
		1.0f).then([this]()
	{
		m_stuff_model[8]->info.mrf = XMFLOAT3(0.0f, 0.1f, 0.5f);
		m_stuff_model[8]->physics_shape = SHAPE_BOX;
		m_stuff_model[8]->collision_range = 1;
		m_stuff_model[8]->info.group = (COL_CARBODY | COL_WHEEL | COL_OBJECTS | COL_CHAR);
		m_stuff_model[8]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	tasks.push_back(Mesh::LoadFromFileAsync(
		*m_Res,
		L"pin.cmo",
		L"",
		L"",
		m_stuff_model[9]->m_mesh,
		0.5f).then([this]()
	{
		m_stuff_model[9]->info.mrf = XMFLOAT3(0.2f, 0.5f, 0.5f);
		m_stuff_model[9]->physics_shape = SHAPE_CYLINDER;
		m_stuff_model[9]->collision_range = 0;
		m_stuff_model[9]->info.group = (COL_CARBODY | COL_WHEEL | COL_TERRAIN | COL_OBJECTS | COL_CHAR);
		m_stuff_model[9]->info.mask = (COL_OBJECTS | COL_RAY);
	}));

	*/

	//return when_all(begin(tasks), end(tasks));


	tasks.push_back(loader->LoadTextureAsync("tree_bark.dds", nullptr, m_static_model[0]->GetMaterialTexture(L"tree_trunk", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("tree_leaves.dds", nullptr, m_static_model[0]->GetMaterialTexture(L"tree_leaves", 0, 1)));

	tasks.push_back(loader->LoadTextureAsync("lamppost.dds", nullptr, m_static_model[3]->GetMaterialTexture(L"lamp_post", 0, 0)));
	//tasks.push_back(loader->LoadTextureAsync("lamppost.dds", nullptr, m_static_model[3]->GetMaterialEmmit(L"lamp_post", 1.0f)));

	tasks.push_back(loader->LoadTextureAsync("lamp-glass.dds", nullptr, m_static_model[3]->GetMaterialTexture(L"lamp_glass", 0, 2)));

	tasks.push_back(loader->LoadTextureAsync("fireplace_tex.dds", nullptr, m_static_model[4]->GetMaterialTexture(L"fire_place", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("fireplace_uv.dds", nullptr, m_static_model[4]->GetMaterialNormal(L"fire_place", 1.0f)));


	tasks.push_back(loader->LoadTextureAsync("mushroomred.dds", nullptr, m_static_model[5]->GetMaterialTexture(L"mushroom", 0, 0)));

	tasks.push_back(loader->LoadTextureAsync("heart.dds", nullptr, m_static_model[6]->GetMaterialTexture(L"HeartColor", 0, 0)));


	tasks.push_back(loader->LoadTextureAsync("yell.dds", nullptr, m_static_model[7]->GetMaterialTexture(L"diamond", 0, 2)));

	tasks.push_back(loader->LoadTextureAsync("gemred.dds", nullptr, m_static_model[8]->GetMaterialTexture(L"saphire", 0, 2)));

	tasks.push_back(loader->LoadTextureAsync("gemred.dds", nullptr, m_static_model[9]->GetMaterialTexture(L"ruby", 0, 2)));


	tasks.push_back(loader->LoadTextureAsync("trees_bark_002_col.dds", nullptr, m_static_model[10]->GetMaterialTexture(L"tree_trunk", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("trees_bark_002_nor.dds", nullptr, m_static_model[10]->GetMaterialNormal(L"tree_trunk", 2.0f)));

	tasks.push_back(loader->LoadTextureAsync("trees_leaves_003_col.dds", nullptr, m_static_model[10]->GetMaterialTexture(L"tree_leaves", 0, 1)));

	tasks.push_back(loader->LoadTextureAsync("hedge_diffuse.dds", nullptr, m_static_model[12]->GetMaterialTexture(L"hedge_col", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("hedge_normal.dds", nullptr, m_static_model[12]->GetMaterialNormal(L"hedge_col", 1.0f)));

	tasks.push_back(loader->LoadTextureAsync("hedgelong_diffuse.dds", nullptr, m_static_model[13]->GetMaterialTexture(L"hedge_col", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("hedgelong_normal.dds", nullptr, m_static_model[13]->GetMaterialNormal(L"hedge_col", 1.0f)));

	tasks.push_back(loader->LoadTextureAsync("hedgearch_diffuse.dds", nullptr, m_static_model[14]->GetMaterialTexture(L"hedge", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("hedgearch_normal.dds", nullptr, m_static_model[14]->GetMaterialNormal(L"hedge", 1.0f)));

	tasks.push_back(loader->LoadTextureAsync("hedgearch_diffuse.dds", nullptr, m_static_model[15]->GetMaterialTexture(L"hedge", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("hedgearch_normal.dds", nullptr, m_static_model[15]->GetMaterialNormal(L"hedge", 1.0f)));

	//tasks.push_back(loader->LoadTextureAsync("hedgearch_normal.dds", nullptr, m_static_model[15]->GetMaterialNormal(L"hedge", 1.0f)));

	tasks.push_back(loader->LoadTextureAsync("gemwhite.dds", nullptr, m_static_model[17]->GetMaterialTexture(L"Material.001", 0, 2)));

	tasks.push_back(loader->LoadTextureAsync("big_old_house_c.dds", nullptr, m_static_model[18]->GetMaterialTexture(L"house_col", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("big_old_house_n.dds", nullptr, m_static_model[18]->GetMaterialNormal(L"house_col", 1.0f)));
	tasks.push_back(loader->LoadTextureAsync("big_old_house_s.dds", nullptr, m_static_model[18]->GetMaterialEmmit(L"house_col", 0.5f)));
	//m_static_model[16]->m_mesh[0]->SetMaterialTexture(L"", 0, m_Res->m_Textures->LoadTexture("trees_leaves_003_col"), 1);


	tasks.push_back(loader->LoadTextureAsync("3td_WhiteBrick_02.dds", nullptr, m_static_model[19]->GetMaterialTexture(L"SR_White", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("3td_WhiteBrick_02_NRM.dds", nullptr, m_static_model[19]->GetMaterialNormal(L"SR_White", 1.0f)));
	tasks.push_back(loader->LoadTextureAsync("3td_WhiteBrick_02.dds", nullptr, m_static_model[19]->GetMaterialTexture(L"SR_TOP", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("3td_WhiteBrick_02_NRM.dds", nullptr, m_static_model[19]->GetMaterialNormal(L"SR_TOP", 1.0f)));
	tasks.push_back(loader->LoadTextureAsync("3td_Stone_08.dds", nullptr, m_static_model[19]->GetMaterialTexture(L"SR_Brick", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("3td_Stone_08_NRM.dds", nullptr, m_static_model[19]->GetMaterialNormal(L"SR_Brick", 1.0f)));

	tasks.push_back(loader->LoadTextureAsync("lamp-glass.dds", nullptr, m_static_model[19]->GetMaterialTexture(L"SR_Glass", 0, 0)));
	//tasks.push_back(loader->LoadTextureAsync("err.dds", nullptr, m_static_model[19]->GetMaterialTexture(L"SR_Glass", 0, 0)));
	//tasks.push_back(loader->LoadTextureAsync("err.dds", nullptr, m_static_model[19]->GetMaterialNormal(L"SR_Glass", 1.0f)));
	tasks.push_back(loader->LoadTextureAsync("door01.dds", nullptr, m_static_model[19]->GetMaterialTexture(L"SR_Door", 0, 0)));
	tasks.push_back(loader->LoadTextureAsync("door01_NRM.dds", nullptr, m_static_model[19]->GetMaterialNormal(L"SR_Door", 1.0f)));

	//m_static_model[17]->m_mesh[0]->SetMaterialTexture(L"", 0, m_Res->m_Textures->LoadTexture("gemwhite"), 1);
